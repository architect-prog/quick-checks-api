// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuickChecks.Kernel.Entities.Enum;
using QuickChecks.Persistence;

#nullable disable

namespace QuickChecks.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "poll_status", new[] { "pending", "in_progress", "completed", "aborted" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "question_type", new[] { "single", "multiple" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuickChecks.Kernel.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("PollId")
                        .HasColumnType("integer")
                        .HasColumnName("poll_id");

                    b.HasKey("Id")
                        .HasName("pk_category_entity");

                    b.HasIndex("PollId")
                        .HasDatabaseName("ix_category_entity_poll_id");

                    b.ToTable("category_entity", (string)null);
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.PollEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("PollTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("poll_template_id");

                    b.Property<DateTimeOffset?>("StartedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_date");

                    b.Property<PollStatus>("Status")
                        .HasColumnType("poll_status")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_poll_entity");

                    b.HasIndex("PollTemplateId")
                        .HasDatabaseName("ix_poll_entity_poll_template_id");

                    b.ToTable("poll_entity", (string)null);
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.PollTemplateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_poll_templates");

                    b.ToTable("poll_templates", (string)null);
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<QuestionType>("Type")
                        .HasColumnType("question_type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_question_entity");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_question_entity_category_id");

                    b.ToTable("question_entity", (string)null);
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.QuestionOptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_question_option_entity");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_option_entity_question_id");

                    b.ToTable("question_option_entity", (string)null);
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.CategoryEntity", b =>
                {
                    b.HasOne("QuickChecks.Kernel.Entities.PollEntity", "Poll")
                        .WithMany("Categories")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_entity_poll_entity_poll_id");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.PollEntity", b =>
                {
                    b.HasOne("QuickChecks.Kernel.Entities.PollTemplateEntity", "PollTemplate")
                        .WithMany("Polls")
                        .HasForeignKey("PollTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_poll_entity_poll_templates_poll_template_id");

                    b.Navigation("PollTemplate");
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.QuestionEntity", b =>
                {
                    b.HasOne("QuickChecks.Kernel.Entities.CategoryEntity", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_entity_category_entity_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.QuestionOptionEntity", b =>
                {
                    b.HasOne("QuickChecks.Kernel.Entities.QuestionEntity", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_option_entity_question_entity_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.PollEntity", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.PollTemplateEntity", b =>
                {
                    b.Navigation("Polls");
                });

            modelBuilder.Entity("QuickChecks.Kernel.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
